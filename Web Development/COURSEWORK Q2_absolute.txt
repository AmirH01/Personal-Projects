.text
    la  $t0, A_LENGTH
    lw  $t0, 0($t0)             # t0 <- A_LENGTH
    la  $t1, A                  # t1: to hold the "address" of the next
                                # array element, initialised to the
                                # address of the first byte of the array
    addi $s0, $zero, 0          # s0: will hold the largest absolute value,
                                # initialised to zero

    NEXT_ARRAY_ELEMENT:

    addiu $t4, $zero, 0
    slt $t3, $zero, $t0           # t3<-(0<t0), t3 will be 0 if t0<=0
    beq $t3, $zero, DONE

    lw $t2, 0($t1)              # t2 <- the current array element
    slt $t3, $t2, $zero           # $t3 just hold the boolean value to see
    beq $t3, 1, NEGATIVE         # if $s0 needs its value to be updated
    beq $t3, 0, POSITIVE

    addiu $t1, $t1, 4           # t1<-t1+4, to get the address of
                                # the the next element
    addiu $t0, $t0, -1          # decrementing t0 by 1


    j NEXT_ARRAY_ELEMENT        # jump to NEXT_ARRAY_ELEMENT (for loop)

    DONE:
    addi $v0, $zero, 1         # set v0 to "1" to select
                               # "print integer" syscall
    add  $a0, $zero, $s0       # a0 <- s0 (the largest absolute value) to be printed
	syscall                    # invoking the syscall to print the integer

    addi $v0, $zero, 10        # set v0 to "10" to select exit syscall
	syscall                    # invoking the syscall to actually exit!

    SET_MAX:
    addu $s0, $zero, $t4

    addiu $t1, $t1, 4           # t1<-t1+4, to get the address of
                                # the the next element
    addiu $t0, $t0, -1          # decrementing t0 by 1

    j NEXT_ARRAY_ELEMENT

    NEGATIVE:
    beq $t2, $zero, CHECK       # $t2 used as a counter

    addiu $t2, $t2, 1           # $t2 is incremented to get closer to 0
    addiu $t4, $t4, 1           # $t4 is increased to become the absolute value
    j NEGATIVE

    POSITIVE:
    beq $t2, $zero, CHECK       # $t2 used as a counter

    sub $t2, $t2, 1             # $t2 decreases to get closer to 0
    addiu $t4, $t4, 1           # $t4 is increased to become the absolute value
    j POSITIVE

    CHECK:
    slt $t3, $s0, $t4           # If $t4 is greater than $s0, then the value of
    beq $t3, 1, SET_MAX         # $t4 will be put into $s0 to update the value

    addiu $t1, $t1, 4           # t1<-t1+4, to get the address of
                                # the the next element
    addiu $t0, $t0, -1          # decrementing t0 by 1
    j NEXT_ARRAY_ELEMENT

.data
    A:                          # our integer array
        .word   -1
        .word   4
        .word   -16
        .word   0
        .word   -2
        .word   5
        .word   13
        .word   2
    A_LENGTH:   .word   8         # the length of the array
